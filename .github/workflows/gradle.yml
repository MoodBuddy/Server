name: CI/CD

on:
  push:
    branches: [ "staging" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:

      - name: checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

        ## create application-database.yml
      - name: make application.yml
        run: |
          
          mkdir -p ./src/main/resources
          cd ./src/main/resources
          
          # application.yml 파일 생성
          touch ./application.yml
          
          # GitHub-Actions 에서 설정한 값을 application.yml 파일에 쓰기
          echo "${{ secrets.APPLICATION }}" >> ./application.yml
        shell: bash

#        ## create application-database.yml
#      - name: make application-database.yml
#        run: |
#
#          mkdir -p ./src/main/resources
#          cd ./src/main/resources
#
#          # application-database.yml 파일 생성
#          touch ./application-database.yml
#
#          # GitHub-Actions 에서 설정한 값을 application-database.yml 파일에 쓰기
#          echo "${{ secrets.DATABASE }}" >> ./application-database.yml
#        shell: bash
#
#      - name: make application-redis.yml
#        run: |
#          cd ./src/main/resources
#
#          # application-redis.yml 파일 생성
#          touch ./application-redis.yml
#
#          # GitHub-Actions 에서 설정한 값을 application-redis.yml 파일에 쓰기
#          echo "${{ secrets.REDIS }}" >> ./application-redis.yml
#        shell: bash
#
#      - name: Build with Gradle
#        uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
#        with:
#          arguments: clean bootJar

      - name: Build with Gradle
        run: |
          chmod +x gradlew 
          ./gradlew build

      ## 웹 이미지 빌드 및 도커허브에 push
      - name: web docker build and push
        run: |
          sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          sudo docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }} . 
          sudo docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}
      ## docker compose up
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.KEY }}
          script: |
            sudo docker stop ${{ secrets.DOCKER_REPO }}
            sudo docker rm ${{ secrets.DOCKER_REPO }}
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}
            sudo docker run -p 8080:8080 -d --net mybridge --name=${{ secrets.DOCKER_REPO }} ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}
#            cd ~
#            docker-compose up -d
#            sudo docker image prune -f
